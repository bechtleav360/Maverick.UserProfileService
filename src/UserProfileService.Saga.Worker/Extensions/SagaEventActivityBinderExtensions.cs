using System;
using MassTransit;
using UserProfileService.Commands;
using UserProfileService.Saga.Worker.States;

namespace UserProfileService.Saga.Worker.Extensions;

/// <summary>
///     Contains extension methods related to a MassTransit <see cref="EventActivityBinder{TState, TCommand}" />.
/// </summary>
internal static class SagaEventActivityBinderExtensions
{
    /// <summary>
    ///     Catches an <see cref="Exception" />, sets the <see cref="CommandProcessState.Exception" /> property of
    ///     <see cref="CommandProcessState" /> to the caught exception, publishes a message generated by
    ///     <paramref name="errorMessageFactory" />, sets the state to <paramref name="errorState" /> and finalizes the state
    ///     machine.
    /// </summary>
    internal static EventActivityBinder<CommandProcessState, TCommand> CatchException<TCommand>(
        this EventActivityBinder<CommandProcessState, TCommand> source,
        State errorState,
        EventExceptionMessageFactory<CommandProcessState, TCommand, Exception, SubmitCommandFailure>
            errorMessageFactory)
        where TCommand : class
    {
        return source.Catch<Exception>(
            callback =>
                callback.Then(c => c.Saga.Exception = c.Exception)
                    .Publish(errorMessageFactory)
                    .TransitionTo(errorState)
                    .Finalize());
    }
}
